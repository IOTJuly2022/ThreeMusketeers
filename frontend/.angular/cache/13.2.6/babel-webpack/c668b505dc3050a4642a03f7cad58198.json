{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nconst _c0 = [\"mdbScrollspy\", \"\"];\nconst _c1 = [\"*\"];\n\nclass MdbScrollspyLinkDirective {\n  constructor(cdRef, document) {\n    this.cdRef = cdRef;\n    this.document = document;\n    this._scrollIntoView = true;\n    this.scrollspyLink = true;\n    this.active = false;\n  }\n\n  get scrollIntoView() {\n    return this._scrollIntoView;\n  }\n\n  set scrollIntoView(value) {\n    this._scrollIntoView = value;\n  }\n\n  get section() {\n    return this._section;\n  }\n\n  set section(value) {\n    if (value) {\n      this._section = value;\n    }\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n\n  onClick() {\n    if (this.section && this.scrollIntoView === true) {\n      this.section.scrollIntoView();\n    }\n  }\n\n  detectChanges() {\n    this.cdRef.detectChanges();\n  }\n\n  assignSectionToId() {\n    this.section = this.document.documentElement.querySelector(`#${this.id}`);\n  }\n\n  ngOnInit() {\n    this.assignSectionToId();\n  }\n\n}\n\nMdbScrollspyLinkDirective.ɵfac = function MdbScrollspyLinkDirective_Factory(t) {\n  return new (t || MdbScrollspyLinkDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMdbScrollspyLinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyLinkDirective,\n  selectors: [[\"\", \"mdbScrollspyLink\", \"\"]],\n  hostVars: 4,\n  hostBindings: function MdbScrollspyLinkDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MdbScrollspyLinkDirective_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"scrollspy-link\", ctx.scrollspyLink)(\"active\", ctx.active);\n    }\n  },\n  inputs: {\n    scrollIntoView: \"scrollIntoView\",\n    id: [\"mdbScrollspyLink\", \"id\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyLinkDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyLink]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    scrollIntoView: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspyLink']\n    }],\n    scrollspyLink: [{\n      type: HostBinding,\n      args: ['class.scrollspy-link']\n    }],\n    active: [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', []]\n    }]\n  });\n})();\n\nclass MdbScrollspyService {\n  constructor() {\n    this.scrollSpys = [];\n    this.activeSubject = new Subject();\n    this.active$ = this.activeSubject;\n  }\n\n  addScrollspy(scrollSpy) {\n    this.scrollSpys.push(scrollSpy);\n  }\n\n  removeScrollspy(scrollSpyId) {\n    const scrollSpyIndex = this.scrollSpys.findIndex(spy => {\n      return spy.id === scrollSpyId;\n    });\n    this.scrollSpys.splice(scrollSpyIndex, 1);\n  }\n\n  updateActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n\n    if (!scrollSpy) {\n      return;\n    }\n\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    this.setActiveLink(activeLink);\n  }\n\n  removeActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n\n    if (!scrollSpy) {\n      return;\n    }\n\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n\n    if (!activeLink) {\n      return;\n    }\n\n    activeLink.active = false;\n    activeLink.detectChanges();\n  }\n\n  setActiveLink(activeLink) {\n    if (activeLink) {\n      activeLink.active = true;\n      activeLink.detectChanges();\n      this.activeSubject.next(activeLink);\n    }\n  }\n\n  removeActiveLinks(scrollSpyId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n\n    if (!scrollSpy) {\n      return;\n    }\n\n    scrollSpy.links.forEach(link => {\n      link.active = false;\n      link.detectChanges();\n    });\n  }\n\n}\n\nMdbScrollspyService.ɵfac = function MdbScrollspyService_Factory(t) {\n  return new (t || MdbScrollspyService)();\n};\n\nMdbScrollspyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MdbScrollspyService,\n  factory: MdbScrollspyService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyService, [{\n    type: Injectable\n  }], null, null);\n})(); // eslint-disable-next-line @angular-eslint/component-class-suffix\n\n\nclass MdbScrollspyDirective {\n  constructor(scrollSpyService) {\n    this.scrollSpyService = scrollSpyService;\n    this._destroy$ = new Subject();\n    this.activeLinkChange = new EventEmitter();\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n\n  ngOnInit() {\n    this.activeSub = this.scrollSpyService.active$.pipe(takeUntil(this._destroy$), distinctUntilChanged()).subscribe(activeLink => {\n      this.activeLinkChange.emit(activeLink);\n    });\n  }\n\n  ngAfterContentInit() {\n    this.scrollSpyService.addScrollspy({\n      id: this.id,\n      links: this.links\n    });\n  }\n\n  ngOnDestroy() {\n    this.scrollSpyService.removeScrollspy(this.id);\n\n    this._destroy$.next();\n\n    this._destroy$.complete();\n  }\n\n}\n\nMdbScrollspyDirective.ɵfac = function MdbScrollspyDirective_Factory(t) {\n  return new (t || MdbScrollspyDirective)(i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\n\nMdbScrollspyDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MdbScrollspyDirective,\n  selectors: [[\"\", \"mdbScrollspy\", \"\"]],\n  contentQueries: function MdbScrollspyDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MdbScrollspyLinkDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n    }\n  },\n  inputs: {\n    id: [\"mdbScrollspy\", \"id\"]\n  },\n  outputs: {\n    activeLinkChange: \"activeLinkChange\"\n  },\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  template: function MdbScrollspyDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyDirective, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: '[mdbScrollspy]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: MdbScrollspyService\n    }];\n  }, {\n    links: [{\n      type: ContentChildren,\n      args: [MdbScrollspyLinkDirective, {\n        descendants: true\n      }]\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspy']\n    }],\n    activeLinkChange: [{\n      type: Output\n    }]\n  });\n})(); // eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nclass MdbScrollspyElementDirective {\n  constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n    this._elementRef = _elementRef;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this.offset = 0;\n  }\n\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n\n  isElementInViewport() {\n    const scrollTop = this.container.scrollTop;\n    const elTop = this.host.offsetTop - this.offset;\n    const elHeight = this.host.offsetHeight;\n    return scrollTop >= elTop && scrollTop < elTop + elHeight;\n  }\n\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.removeActiveLinks(scrollSpyId);\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    }\n  }\n\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n\n  listenToScroll() {\n    this.renderer.listen(this.container, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n\n  ngOnInit() {\n    this.id = this.host.id;\n\n    if (!this.container) {\n      this.container = this._getClosestEl(this.host, '.scrollspy-container');\n    }\n\n    this.renderer.setStyle(this.container, 'position', 'relative');\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n\n  _getClosestEl(el, selector) {\n    for (; el && el !== document; el = el.parentNode) {\n      if (el.matches && el.matches(selector)) {\n        return el;\n      }\n    }\n\n    return null;\n  }\n\n}\n\nMdbScrollspyElementDirective.ɵfac = function MdbScrollspyElementDirective_Factory(t) {\n  return new (t || MdbScrollspyElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\n\nMdbScrollspyElementDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyElementDirective,\n  selectors: [[\"\", \"mdbScrollspyElement\", \"\"]],\n  inputs: {\n    container: \"container\",\n    scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyElementDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyElement]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    container: [{\n      type: Input\n    }],\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyElement']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MdbScrollspyWindowDirective {\n  constructor(document, el, renderer, ngZone, scrollSpyService) {\n    this.document = document;\n    this.el = el;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this.offset = 0;\n  }\n\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n\n  isElementInViewport() {\n    const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n    const elHeight = this.el.nativeElement.offsetHeight;\n    const elTop = this.el.nativeElement.offsetTop - this.offset;\n    const elBottom = elTop + elHeight;\n    return scrollTop >= elTop && scrollTop <= elBottom;\n  }\n\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    } else {\n      this.scrollSpyService.removeActiveState(scrollSpyId, id);\n    }\n  }\n\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n\n  listenToScroll() {\n    this.renderer.listen(window, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n\n  ngOnInit() {\n    this.id = this.el.nativeElement.id;\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n\n}\n\nMdbScrollspyWindowDirective.ɵfac = function MdbScrollspyWindowDirective_Factory(t) {\n  return new (t || MdbScrollspyWindowDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n};\n\nMdbScrollspyWindowDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MdbScrollspyWindowDirective,\n  selectors: [[\"\", \"mdbScrollspyWindow\", \"\"]],\n  inputs: {\n    scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"],\n    offset: \"offset\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyWindowDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyWindow]'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyWindow']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MdbScrollspyModule {}\n\nMdbScrollspyModule.ɵfac = function MdbScrollspyModule_Factory(t) {\n  return new (t || MdbScrollspyModule)();\n};\n\nMdbScrollspyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MdbScrollspyModule\n});\nMdbScrollspyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MdbScrollspyService]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      exports: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      providers: [MdbScrollspyService]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };","map":{"version":3,"names":["i0","Directive","Inject","Input","HostBinding","HostListener","Injectable","EventEmitter","Component","ContentChildren","Output","NgModule","DOCUMENT","takeUntil","distinctUntilChanged","Subject","MdbScrollspyLinkDirective","constructor","cdRef","document","_scrollIntoView","scrollspyLink","active","scrollIntoView","value","section","_section","id","_id","newId","onClick","detectChanges","assignSectionToId","documentElement","querySelector","ngOnInit","ɵfac","ChangeDetectorRef","ɵdir","type","args","selector","undefined","decorators","MdbScrollspyService","scrollSpys","activeSubject","active$","addScrollspy","scrollSpy","push","removeScrollspy","scrollSpyId","scrollSpyIndex","findIndex","spy","splice","updateActiveState","activeLinkId","find","activeLink","links","link","setActiveLink","removeActiveState","next","removeActiveLinks","forEach","ɵprov","MdbScrollspyDirective","scrollSpyService","_destroy$","activeLinkChange","activeSub","pipe","subscribe","emit","ngAfterContentInit","ngOnDestroy","complete","ɵcmp","template","descendants","MdbScrollspyElementDirective","_elementRef","renderer","ngZone","offset","host","nativeElement","_scrollSpyId","isElementInViewport","scrollTop","container","elTop","offsetTop","elHeight","offsetHeight","onScroll","listenToScroll","listen","_getClosestEl","setStyle","runOutsideAngular","bind","ngAfterViewInit","setTimeout","el","parentNode","matches","ElementRef","Renderer2","NgZone","MdbScrollspyWindowDirective","body","elBottom","window","MdbScrollspyModule","ɵmod","ɵinj","declarations","exports","providers"],"sources":["E:/cognizant/training/git/iotproject/frontend/node_modules/mdb-angular-ui-kit/fesm2015/mdb-angular-ui-kit-scrollspy.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nclass MdbScrollspyLinkDirective {\n    constructor(cdRef, document) {\n        this.cdRef = cdRef;\n        this.document = document;\n        this._scrollIntoView = true;\n        this.scrollspyLink = true;\n        this.active = false;\n    }\n    get scrollIntoView() {\n        return this._scrollIntoView;\n    }\n    set scrollIntoView(value) {\n        this._scrollIntoView = value;\n    }\n    get section() {\n        return this._section;\n    }\n    set section(value) {\n        if (value) {\n            this._section = value;\n        }\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    onClick() {\n        if (this.section && this.scrollIntoView === true) {\n            this.section.scrollIntoView();\n        }\n    }\n    detectChanges() {\n        this.cdRef.detectChanges();\n    }\n    assignSectionToId() {\n        this.section = this.document.documentElement.querySelector(`#${this.id}`);\n    }\n    ngOnInit() {\n        this.assignSectionToId();\n    }\n}\nMdbScrollspyLinkDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyLinkDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyLinkDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbScrollspyLinkDirective, selector: \"[mdbScrollspyLink]\", inputs: { scrollIntoView: \"scrollIntoView\", id: [\"mdbScrollspyLink\", \"id\"] }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.scrollspy-link\": \"this.scrollspyLink\", \"class.active\": \"this.active\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyLinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyLink]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { scrollIntoView: [{\n                type: Input\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspyLink']\n            }], scrollspyLink: [{\n                type: HostBinding,\n                args: ['class.scrollspy-link']\n            }], active: [{\n                type: HostBinding,\n                args: ['class.active']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', []]\n            }] } });\n\nclass MdbScrollspyService {\n    constructor() {\n        this.scrollSpys = [];\n        this.activeSubject = new Subject();\n        this.active$ = this.activeSubject;\n    }\n    addScrollspy(scrollSpy) {\n        this.scrollSpys.push(scrollSpy);\n    }\n    removeScrollspy(scrollSpyId) {\n        const scrollSpyIndex = this.scrollSpys.findIndex((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        this.scrollSpys.splice(scrollSpyIndex, 1);\n    }\n    updateActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        this.setActiveLink(activeLink);\n    }\n    removeActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        if (!activeLink) {\n            return;\n        }\n        activeLink.active = false;\n        activeLink.detectChanges();\n    }\n    setActiveLink(activeLink) {\n        if (activeLink) {\n            activeLink.active = true;\n            activeLink.detectChanges();\n            this.activeSubject.next(activeLink);\n        }\n    }\n    removeActiveLinks(scrollSpyId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        scrollSpy.links.forEach((link) => {\n            link.active = false;\n            link.detectChanges();\n        });\n    }\n}\nMdbScrollspyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMdbScrollspyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyService, decorators: [{\n            type: Injectable\n        }] });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n    constructor(scrollSpyService) {\n        this.scrollSpyService = scrollSpyService;\n        this._destroy$ = new Subject();\n        this.activeLinkChange = new EventEmitter();\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    ngOnInit() {\n        this.activeSub = this.scrollSpyService.active$\n            .pipe(takeUntil(this._destroy$), distinctUntilChanged())\n            .subscribe((activeLink) => {\n            this.activeLinkChange.emit(activeLink);\n        });\n    }\n    ngAfterContentInit() {\n        this.scrollSpyService.addScrollspy({ id: this.id, links: this.links });\n    }\n    ngOnDestroy() {\n        this.scrollSpyService.removeScrollspy(this.id);\n        this._destroy$.next();\n        this._destroy$.complete();\n    }\n}\nMdbScrollspyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyDirective, deps: [{ token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Component });\nMdbScrollspyDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbScrollspyDirective, selector: \"[mdbScrollspy]\", inputs: { id: [\"mdbScrollspy\", \"id\"] }, outputs: { activeLinkChange: \"activeLinkChange\" }, queries: [{ propertyName: \"links\", predicate: MdbScrollspyLinkDirective, descendants: true }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyDirective, decorators: [{\n            type: Component,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/component-selector\n                    selector: '[mdbScrollspy]',\n                    template: '<ng-content></ng-content>',\n                }]\n        }], ctorParameters: function () { return [{ type: MdbScrollspyService }]; }, propDecorators: { links: [{\n                type: ContentChildren,\n                args: [MdbScrollspyLinkDirective, { descendants: true }]\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspy']\n            }], activeLinkChange: [{\n                type: Output\n            }] } });\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n    constructor(_elementRef, renderer, ngZone, scrollSpyService) {\n        this._elementRef = _elementRef;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n        this.offset = 0;\n    }\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    isElementInViewport() {\n        const scrollTop = this.container.scrollTop;\n        const elTop = this.host.offsetTop - this.offset;\n        const elHeight = this.host.offsetHeight;\n        return scrollTop >= elTop && scrollTop < elTop + elHeight;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.removeActiveLinks(scrollSpyId);\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(this.container, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.host.id;\n        if (!this.container) {\n            this.container = this._getClosestEl(this.host, '.scrollspy-container');\n        }\n        this.renderer.setStyle(this.container, 'position', 'relative');\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n    _getClosestEl(el, selector) {\n        for (; el && el !== document; el = el.parentNode) {\n            if (el.matches && el.matches(selector)) {\n                return el;\n            }\n        }\n        return null;\n    }\n}\nMdbScrollspyElementDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyElementDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyElementDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbScrollspyElementDirective, selector: \"[mdbScrollspyElement]\", inputs: { container: \"container\", scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyElementDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyElement]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { container: [{\n                type: Input\n            }], scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyElement']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyWindowDirective {\n    constructor(document, el, renderer, ngZone, scrollSpyService) {\n        this.document = document;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n        this.offset = 0;\n    }\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    isElementInViewport() {\n        const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n        const elHeight = this.el.nativeElement.offsetHeight;\n        const elTop = this.el.nativeElement.offsetTop - this.offset;\n        const elBottom = elTop + elHeight;\n        return scrollTop >= elTop && scrollTop <= elBottom;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n        else {\n            this.scrollSpyService.removeActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(window, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.el.nativeElement.id;\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n}\nMdbScrollspyWindowDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyWindowDirective, deps: [{ token: DOCUMENT }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\nMdbScrollspyWindowDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.4\", type: MdbScrollspyWindowDirective, selector: \"[mdbScrollspyWindow]\", inputs: { scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyWindowDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyWindow]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }];\n    }, propDecorators: { scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyWindow']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyModule {\n}\nMdbScrollspyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMdbScrollspyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyModule, declarations: [MdbScrollspyDirective,\n        MdbScrollspyLinkDirective,\n        MdbScrollspyElementDirective,\n        MdbScrollspyWindowDirective], exports: [MdbScrollspyDirective,\n        MdbScrollspyLinkDirective,\n        MdbScrollspyElementDirective,\n        MdbScrollspyWindowDirective] });\nMdbScrollspyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyModule, providers: [MdbScrollspyService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.4\", ngImport: i0, type: MdbScrollspyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    exports: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    providers: [MdbScrollspyService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}